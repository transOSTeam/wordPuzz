<hmtl>
	<head>
		<title>wordPuzz</title>
		<link rel="stylesheet" type="text/css" href="/stylesheets/cssReset.css">
		<link rel="stylesheet" type="text/css" href="/stylesheets/gameStyle.css">

		<script src="/socket.io/socket.io.js"></script>
		<script type="text/javascript">
			var socket = io.connect('http://{{hostName}}');
			var playerName = "{{player}}";
			var isCaptain = {{captain}};
			window.onload = function(){
				var successSound = document.getElementById("successSound");
				var errorSound = document.getElementById("errorSound");
				if(isCaptain){
					var startButton = document.createElement("BUTTON");
					var startInstruction = document.createElement("p");
					startInstruction.innerHTML = "Start the game when all the participants are connected"
					startButton.innerHTML = "start game";
					startButton.onclick = function(){
						socket.emit('startGame', {playerName:playerName});
					};
					puzzleContainer.appendChild(startInstruction);
					puzzleContainer.appendChild(document.createElement("br"))
					puzzleContainer.appendChild(startButton);
				}
				else{
					puzzleContainer.innerHTML = "<p>Waiting for server to start the game...</p>";
				}
			}
			socket.on('update', function (data) {
				var classType;
				if(data.playerName == playerName){
					successSound.play();
					classType = "solvedBox";
				}
				else
					classType = "someOtherSolvedBox"
				var startPt = data.startPt.split('-');
				var endPt = data.endPt.split('-');
				updatePuzzle(startPt,endPt,classType);
			});
			socket.on('gameOver',function(data){
				var scoreList = document.createElement("ol");
				var i, listItem;
				puzzleContainer.innerHTML = "";
				for(i in data){
					if(typeof(data[i]) === 'object'){
						listItem = document.createElement("li");
						listItem.innerHTML = data[i].name + " -> " + data[i].score;
						scoreList.appendChild(listItem); 
					}
				}
				puzzleContainer.appendChild(scoreList);
			})
			function updatePuzzle(startPt,endPt,classType){
				startPt[0] = parseInt(startPt[0]);
				startPt[1] = parseInt(startPt[1]);
				endPt[0] = parseInt(endPt[0]);
				endPt[1] = parseInt(endPt[1]);
				var tempId;
				var tempBox;
				if(startPt[0] == endPt[0]){			//horizontal
					if(startPt[1] < endPt[1]){				//go right
						for(;startPt[1] <= endPt[1]; startPt[1]++){
							tempId = startPt[0] + "-" + startPt[1];
							tempBox = document.getElementById(tempId).classList.add(classType);
						}
					}
					else {									//go left
						for(;startPt[1] >= endPt[1]; startPt[1]--){
							tempId = startPt[0] + "-" + startPt[1];
							tempBox = document.getElementById(tempId).classList.add(classType);
						}
					}
				}
				else if(startPt[1] == endPt[1]){		//vertical
					if(startPt[0] < endPt[0]){
						for(;startPt[0] <= endPt[0]; startPt[0]++){
							tempId = startPt[0] + "-" + startPt[1];
							tempBox = document.getElementById(tempId).classList.add(classType);
						}
					}
					else {
						for(;startPt[0] >= endPt[0]; startPt[0]--){
							tempId = startPt[0] + "-" + startPt[1];
							tempBox = document.getElementById(tempId).classList.add(classType);
						}
					}
				}
				else {									//diagonal
					if(startPt[0] < endPt[0] && startPt[1] < endPt[1]){					//go south east
						for(;startPt[0] <= endPt[0] && startPt[1] <= endPt[1]; startPt[0]++, startPt[1]++){
							tempId = startPt[0] + "-" + startPt[1];
							tempBox = document.getElementById(tempId).classList.add(classType);
						}
					}
					else if(startPt[0] > endPt[0] && startPt[1] > endPt[1]){					//go north west
						for(;startPt[0] >= endPt[0] && startPt[1] >= endPt[1]; startPt[0]--, startPt[1]--){
							tempId = startPt[0] + "-" + startPt[1];
							tempBox = document.getElementById(tempId).classList.add(classType);
						}
					}
					else if(startPt[0] < endPt[0] && startPt[1] > endPt[1]){					//go south west
						for(;startPt[0] <= endPt[0] && startPt[1] >= endPt[1]; startPt[0]++, startPt[1]--){
							tempId = startPt[0] + "-" + startPt[1];
							tempBox = document.getElementById(tempId).classList.add(classType);
						}
					}
					else if(startPt[0] > endPt[0] && startPt[1] < endPt[1]){					//go north east
						for(;startPt[0] >= endPt[0] && startPt[1] <= endPt[1]; startPt[0]--, startPt[1]++){
							tempId = startPt[0] + "-" + startPt[1];
							tempBox = document.getElementById(tempId).classList.add(classType);
						}
					}
				}
			}
			var jsonReq = new XMLHttpRequest();
			jsonReq.open("GET", "/getPuzz", true);
			jsonReq.send(null);
			jsonReq.onreadystatechange = function(){
				if (jsonReq.readyState == 4){
					var puzzle = JSON.parse(jsonReq.responseText);
					socket.on('startGame', function(){
						puzzle = puzzle.puzz;
						kickStart(puzzle);
						activateEventListeners();
					});
				}
			}
			function kickStart(puzzle){
				var rowSize = puzzle.length;
				var i,j;
				var puzzString = "<table id='puzzleTbl'>";
				for (i = 0; i < rowSize; i++) {
					puzzString += "<tr class='puzzTblRow'>"; 				//append
					for(j = 0; j < rowSize; j++){
						puzzString += "<td class='puzzleTblCol' id='"+i+"-"+j+"'>" + puzzle[i][j] + "</td>";		//append
					}
					puzzString += "</tr>";									//append
				};
				puzzString += "</table>";									//apend
				var puzzleContainer = document.getElementById("puzzleContainer");
				puzzleContainer.innerHTML = puzzString;
			}

			//event listeners start
			function activateEventListeners(){
				var boxes = document.getElementsByClassName("puzzleTblCol");
				var curSelLine = new Array();
				var recording = false;
				var originBox = null;
				for(var i = 0, j=boxes.length; i<j; i++){
				    boxes[i].addEventListener("mousedown", function(e){
				    	e = e || window.event;
				    	var thisBox = e.target;
				    	if(!curSelLine)
				    		curSelLine = new Array();
				    	curSelLine.push(thisBox);
				    	recording = true;
				    	originBox = thisBox;
				    	thisBox.classList.add("selectedBox");
				    	e.preventDefault();
				    })
				    boxes[i].addEventListener("mouseover", function(e){
				    	e = e || window.event;
				    	var i;
				    	thisBox = e.target;
					    if(recording){
					    	if(curSelLine != null)
					    		for(var i = 0; i < curSelLine.length; i++)
				    				curSelLine[i].classList.remove("selectedBox");
					    	curSelLine = getLine(originBox, thisBox);
					    	if(curSelLine != null)
					    		for(i = 0; i < curSelLine.length; i++)
					    			curSelLine[i].classList.add("selectedBox");
					    }
					    e.preventDefault();
				    });

				    boxes[i].addEventListener("mouseout", function(e){
				    	e = e || window.event;
				        e.preventDefault();
				    });
				    boxes[i].addEventListener("mouseup",function(e){
				    	if(curSelLine){
				    		if((curSelLine[0].classList.contains("solvedBox") && curSelLine[curSelLine.length-1].classList.contains("solvedBox"))
							|| (curSelLine[0].classList.contains("someOtherSolvedBox") && curSelLine[curSelLine.length-1].classList.contains("someOtherSolvedBox"))){
								errorSound.play();
							}
							else{
								socket.emit('chkAns', { playerName: playerName ,startPt: curSelLine[0].id, endPt : curSelLine[curSelLine.length - 1].id });
					    		for(var i = 0; i < curSelLine.length; i++)
					    		curSelLine[i].classList.remove("selectedBox");
							}
				    	}
				    	curSelLine = [];					//clear all - Clinic :D
				    	recording = false;
				    	originBox = null;
				    	e.preventDefault();
				    })
				}
			}
			function getLine(originBox, targetBox){
				var line = null;
				if(originBox != null){
					var originBoxCord = originBox.id.split("-");
					var targetBoxCord = targetBox.id.split("-");
					
					originBoxCord[0] = parseInt(originBoxCord[0]);
					originBoxCord[1] = parseInt(originBoxCord[1]);

					targetBoxCord[0] = parseInt(targetBoxCord[0]);
					targetBoxCord[1] = parseInt(targetBoxCord[1]);
					if(originBoxCord[0] === targetBoxCord[0]){				//horizontal
						line = new Array();
						if(originBoxCord[1] < targetBoxCord[1])
							for(;originBoxCord[1] <= targetBoxCord[1]; originBoxCord[1]++)
								line.push(document.getElementById(originBoxCord[0]+"-"+originBoxCord[1]))				//my computer is fast and has lot of memory
						else
							for(;originBoxCord[1] >= targetBoxCord[1]; originBoxCord[1]--)
								line.push(document.getElementById(originBoxCord[0]+"-"+originBoxCord[1]))
					}
					else if(originBoxCord[1] == targetBoxCord[1]){				//vertical
						line = new Array();
						if(originBoxCord[0] < targetBoxCord[0])
							for(;originBoxCord[0] <= targetBoxCord[0]; originBoxCord[0]++)
								line.push(document.getElementById(originBoxCord[0]+"-"+originBoxCord[1]))				//my computer is fast and has lot of memory
						else
							for(;originBoxCord[0] >= targetBoxCord[0]; originBoxCord[0]--)
								line.push(document.getElementById(originBoxCord[0]+"-"+originBoxCord[1]))
					}
					else if(targetBoxCord[0] - originBoxCord[0] === targetBoxCord[1] - originBoxCord[1]){							//digonal
						line = new Array();

						if(originBoxCord[0] > targetBoxCord[0])				//north west
							for(;originBoxCord[0] >= targetBoxCord[0] && originBoxCord[1] >= targetBoxCord[1]; originBoxCord[0]--, originBoxCord[1]--){
								line.push(document.getElementById(originBoxCord[0]+"-"+originBoxCord[1]));
							}
						else 												//south east
							for(;originBoxCord[0] <= targetBoxCord[0] && originBoxCord[1] <= targetBoxCord[1]; originBoxCord[0]++, originBoxCord[1]++){
								line.push(document.getElementById(originBoxCord[0]+"-"+originBoxCord[1]));
							}
					}
					else if(targetBoxCord[0] - originBoxCord[0] === -1 * (targetBoxCord[1] - originBoxCord[1])){
						line = new Array();
						
						if(originBoxCord[0] > targetBoxCord[0])				//north east
							for(;originBoxCord[0] >= targetBoxCord[0] && originBoxCord[1] <= targetBoxCord[1]; originBoxCord[0]--, originBoxCord[1]++){
								line.push(document.getElementById(originBoxCord[0]+"-"+originBoxCord[1]));
							}
						else
							for(;originBoxCord[0] <= targetBoxCord[0] && originBoxCord[1] >= targetBoxCord[1]; originBoxCord[0]++, originBoxCord[1]--){
								line.push(document.getElementById(originBoxCord[0]+"-"+originBoxCord[1]));
							}
					}
					return line;
				}
			}
		</script>
	</head>
	<body>
		<h2>WordPuzz</h2>
		<h3>Player: {{player}}</h3>
		<div id="puzzleContainer"></div>
		<audio id="successSound">
			<source src="/resources/success.wav" type="audio/mpeg">
		</audio>
		<audio id="errorSound">
			<source src="/resources/error.wav" type="audio/mpeg">
		</audio>
	</body>
</html>